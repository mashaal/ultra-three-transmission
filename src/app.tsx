import useAsset from "ultra/hooks/use-asset.js";
import { Suspense, useEffect, useState } from "react";
import * as THREE from "three";
import { Canvas } from "@react-three/fiber";
import {
  AccumulativeShadows,
  Bounds,
  Center,
  Environment,
  Loader,
  OrbitControls,
  RandomizedLight,
  useGLTF,
} from "@react-three/drei";
import { MeshTransmissionMaterial } from "./mesh.tsx";

/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.2 gelatinous_cube.glb --transform --simplify
Author: glenatron (https://sketchfab.com/glenatron)
License: CC-BY-NC-4.0 (http://creativecommons.org/licenses/by-nc/4.0/)
Source: https://sketchfab.com/3d-models/gelatinous-cube-e08385238f4d4b59b012233a9fbdca21
Title: Gelatinous Cube
*/

export function GelatinousCube(props) {
  const { nodes, materials } = useGLTF("/gelatinous_cube.glb");
  return (
    <group dispose={null}>
      <mesh geometry={nodes.cube1.geometry} position={[-0.56, 0.38, -0.11]}>
        <MeshTransmissionMaterial
          background={new THREE.Color("#dddddd")}
          samples={10}
          resolution={2048}
          transmission={1}
          roughness={0.0}
          thickness={3.5}
          ior={1.5}
          chromaticAberration={0.1}
          anstrophy={0.1}
          distortion={0}
          distortionSpeed={1}
          distortionScale={0.3}
          temporalDistortion={0.65}
          attenuationDistance={0.5}
          attenuationColor={"#ffffff"}
          color={"#c9ffa1"}
          bg={"#839681"}
        />
      </mesh>
      <mesh
        castShadow
        renderOrder={-100}
        geometry={nodes.cube2.geometry}
        material={materials.cube_mat}
        material-side={THREE.FrontSide}
        position={[-0.56, 0.38, -0.11]}
      />
      <mesh
        geometry={nodes.bubbles.geometry}
        material={materials.cube_bubbles_mat}
        position={[-0.56, 0.38, -0.11]}
      />
      <group position={[-0.56, 0.38, -0.41]}>
        <mesh
          geometry={nodes.arrows.geometry}
          material={materials.weapons_mat}
        />
        <mesh
          geometry={nodes.skeleton_1.geometry}
          material={materials.skele_mat}
        />
        <mesh
          geometry={nodes.skeleton_2.geometry}
          material={materials.weapons_mat}
          material-side={THREE.FrontSide}
        />
      </group>
    </group>
  );
}

export default function App() {
  const [mount, set] = useState(false);
  useGLTF.preload("/gelatinous_cube.glb");
  useEffect(() => {
    set(true);
  }, []);
  return (
    <html lang="en">
      <head>
        <meta charSet="utf-8" />
        <title>Ultra: Gelatinous Cube</title>
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="shortcut icon" href={useAsset("/favicon.ico")} />
        <link rel="preload" as="style" href={useAsset("/style.css")} />
        <link rel="stylesheet" href={useAsset("/style.css")} />
      </head>
      <body>
        <main>
          {mount && (
            <>
              <Loader />
              <Canvas shadows camera={{ position: [15, 10, 15], fov: 30 }}>
                <ambientLight />
                <Bounds fit observe margin={1.25}>
                  <Center top>
                    <GelatinousCube />
                  </Center>
                </Bounds>
                <AccumulativeShadows
                  temporal
                  frames={100}
                  alphaTest={0.9}
                  color="#3ead5d"
                  colorBlend={1}
                  opacity={1}
                  scale={12}
                >
                  <RandomizedLight
                    radius={8}
                    ambient={0.5}
                    intensity={1}
                    position={[2.5, 5, -2.5]}
                    bias={0.001}
                  />
                </AccumulativeShadows>
                <OrbitControls
                  minPolarAngle={0}
                  maxPolarAngle={Math.PI / 2}
                  autoRotate
                  autoRotateSpeed={1.5}
                  makeDefault
                />
                <Environment
                  files="https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/dancing_hall_1k.hdr"
                  background
                  blur={1}
                />
              </Canvas>
            </>
          )}
        </main>
      </body>
    </html>
  );
}
